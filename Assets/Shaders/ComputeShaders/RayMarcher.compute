// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


RWTexture2D<float4> Result;
Texture2D<float4> Source;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;


static const float maxDst = 200;
static const float epsilon = 0.001;
static const float2 epsilon2 = float2(epsilon,0);
float smoothing;


struct SDFResult {
    float distance;
    float3 color;
};

struct Sphere {
    float3 position;
    float radius;
    float3 color;
};

struct Cube{
    float3 position;
    float3 bounds;
    float3 color;
};

struct Triangle{
    float3 position;
    float3 vertex1;
    float3 vertex2;
    float3 vertex3;
    float3 color;
};

/*struct Mesh{
    float3 position;
    int _NumTriangles;
    Triangle triangles[_NumTriangles];
};*/

int _NumSpheres;

RWStructuredBuffer<Sphere> Spheres;

int _NumCubes;

RWStructuredBuffer<Cube> Cubes;

int _NumTriangles;

RWStructuredBuffer<Triangle> Triangles;


//Ray's
/////////////////////////////////////////////////////////////////////////////////////////
struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}


//SDF's
/////////////////////////////////////////////////////////////////////////////////////////////


float SDFSphere(float3 pos, float3 centre, float radius){
    return length(centre-pos)-radius;
}

float SDFBox( float3 pos, float3 bounds)
{
  float3 q = abs(pos) - bounds;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float dot2( in float3 v ) { return dot(v,v); }

float SDFTriangle(float3 pos, float3 vertex1, float3 vertex2, float3 vertex3){
  float3 ba = vertex2 - vertex1; float3 pa = pos - vertex1;
  float3 cb = vertex3 - vertex2; float3 pb = pos - vertex2;
  float3 ac = vertex1 - vertex3; float3 pc = pos - vertex3;
  float3 nor = cross( ba, ac );

  return sqrt(
    (sign(dot(cross(ba,nor),pa)) +
     sign(dot(cross(cb,nor),pb)) +
     sign(dot(cross(ac,nor),pc))<2.0)
     ?
     min( min(
     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),
     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),
     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )
     :
     dot(nor,pa)*dot(nor,pa)/dot2(nor) );
}

//Combinations
///////////////////////////////////////////////////////////////////////////////////////////


float IntersectDist(float dist1, float dist2){
    return max(dist1,dist2);
}

float smin( float a, float b, float k )
{
    k *= 1.0;
    float r = exp2(-a/k) + exp2(-b/k);
    return -k*log2(r);
}
float3 mix(float3 x, float3 y, float a) {
    return x * (1 - a) + y * a;
}

SDFResult SmoothMinWithColor(float aDist, float3 aColor, float bDist, float3 bColor, float k) {
    float h = clamp(0.5 + 0.5 * (bDist - aDist) / k, 0.0, 1.0);
    SDFResult result;
    result.distance = mix(bDist, aDist, h) - k * h * (1.0 - h);
    result.color = lerp(bColor, aColor, h);
    return result;
}

SDFResult sminRootWithColor(float aDist, float3 aColor, float bDist, float3 bColor, float k )
{
    k*=2.0;
    float x = bDist-aDist;
    float h = clamp(0.5*( aDist+bDist-sqrt(x*x+k*k)),0.0,1.0);
    SDFResult result;
    result.distance = h;
    result.color = lerp(aColor,bColor,h);
    return result;
}

SDFResult ssubstract(float aDist, float3 aColor, float bDist, float3 bColor, float k ){
    float h = clamp( 0.5 - 0.5*(bDist+aDist)/k, 0.0, 1.0 );
    SDFResult result;
    result.distance = mix( bDist, -aDist, h ) + k*h*(1.0-h);
    result.color = lerp(aColor,bColor,h);
    return result;
}


//SCENE
/////////////////////////////////////////////////////////////////////////////////////////////////////



float4 SDFScene(float3 pos){
     float maxDistance = 1000.0;
    SDFResult sceneResult;
    sceneResult.distance = maxDistance;
    sceneResult.color = float3(1.0, 1.0, 1.0); // Default color
    
    for(int i = 0; i < _NumSpheres; i++) {
        Sphere sphere = Spheres[i];
        float distanceToSphere = SDFSphere(pos, sphere.position, sphere.radius);
        
        sceneResult = sminRootWithColor(sceneResult.distance, sceneResult.color, distanceToSphere, sphere.color, smoothing);
    }

    for(int j = 0; j < _NumCubes; j++) {
        Cube cube = Cubes[j];
        float distanceToCube = SDFBox(pos - cube.position,cube.bounds);
        
        sceneResult = sminRootWithColor(sceneResult.distance, sceneResult.color, distanceToCube, cube.color, smoothing);
    }

    for(int k = 0; k < _NumTriangles; k++){
        Triangle tr = Triangles[k];
        float distanceToTriangle = SDFTriangle(tr.position, tr.vertex1, tr.vertex2, tr.vertex3);
        
        //sceneResult = sminRootWithColor(sceneResult.distance, sceneResult.color, distanceToTriangle, tr.color, smoothing);
    }

    return float4(sceneResult.color,sceneResult.distance);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////


//Ligthing
//////////////////////////////////////////////////////////////////////////////////////////////
float3 computeNormal(float3 pos){
    return normalize(float3(SDFScene(pos-epsilon2.xyy).w,
                            SDFScene(pos-epsilon2.yxy).w,
                            SDFScene(pos-epsilon2.yyx).w));
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width,height;
    Result.GetDimensions(width, height);

    Result[id.xy] = Source[id.xy];

    float2 uv = id.xy / float2(width,height) * 2 - 1;
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;

    while (rayDst < maxDst) {
        marchSteps ++;
        float4 sceneInfo = SDFScene(ray.origin);
        float dst = sceneInfo.w;
        
        float3 pointOnSurface = ray.origin + ray.direction *dst;

        float3 normal = computeNormal(pointOnSurface);

        if (dst <= epsilon) {
            float3 col = sceneInfo.xyz;

            Result[id.xy] = float4(normal,1);

            break;
        }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }

}
